#!/bin/bash
set -euo pipefail
trap 'echo "‚ùå Error en l√≠nea $LINENO durante validaci√≥n DNS y configuraci√≥n final. Revisa el log." && exit 1' ERR

# Cargar variables y funciones
[ -f .env ] && source .env || { echo "‚ùå Falta archivo .env"; exit 1; }
[ -f scripts/node-helpers.sh ] && source scripts/node-helpers.sh || { echo "‚ùå Falta archivo scripts/node-helpers.sh"; exit 1; }

LOG="logs/08-dns-config-$(date +%F-%H%M).log"
mkdir -p logs && exec > >(tee -a "$LOG") 2>&1

echo "üåê Iniciando configuraci√≥n DNS y validaci√≥n final..."

# 1. CONFIGURACI√ìN INICIAL
# ========================
validate_nodes_config

# Validar configuraci√≥n de subdominios
validate_subdomain_config

export PATH=$PATH:/var/lib/rancher/rke2/bin
export KUBECONFIG=${KUBECONFIG:-/etc/rancher/rke2/rke2.yaml}

# Verificar que kubeconfig use el endpoint correcto
if ! grep -q "$K8S_API_DOMAIN" "$KUBECONFIG" 2>/dev/null; then
  echo "‚ö†Ô∏è  Warning: kubeconfig no apunta a $K8S_API_DOMAIN"
  echo "üí° Ejecuta primero: scripts/02-install-cluster.sh"
fi

# Verificar kubectl
if ! command -v kubectl &>/dev/null; then
  echo "‚ùå kubectl no est√° disponible"
  exit 1
fi

# Verificar acceso al cl√∫ster
if ! kubectl get nodes &>/dev/null; then
  echo "‚ùå No se puede acceder al cl√∫ster Kubernetes"
  exit 1
fi

echo "‚úÖ Acceso al cl√∫ster confirmado"

# 2. VERIFICACI√ìN DE SERVICIOS LOADBALANCER
# =========================================
echo ""
echo "üåê VERIFICACI√ìN DE SERVICIOS LOADBALANCER"
echo "=========================================="

echo "üìä Servicios LoadBalancer en el cl√∫ster:"
kubectl get services -A | grep LoadBalancer

echo ""
echo "üîç Verificando IPs externas asignadas:"

# Funci√≥n para verificar servicio LoadBalancer
check_loadbalancer() {
  local namespace=$1
  local service=$2
  local description=$3
  
  echo ""
  echo "üì° Verificando $description..."
  
  if kubectl -n "$namespace" get service "$service" &>/dev/null; then
    EXTERNAL_IP=$(kubectl -n "$namespace" get service "$service" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
    
    if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
      echo "   ‚úÖ IP externa asignada: $EXTERNAL_IP"
      
      # Verificar que la IP est√© en el rango de MetalLB
      if [ -n "${METALLB_IP_RANGE:-}" ]; then
        START_IP=$(echo "$METALLB_IP_RANGE" | cut -d'-' -f1)
        END_IP=$(echo "$METALLB_IP_RANGE" | cut -d'-' -f2)
        echo "   üìä Rango MetalLB: $START_IP - $END_IP"
      fi
      
      return 0
    else
      echo "   ‚ùå Sin IP externa asignada"
      echo "   üìã Estado del servicio:"
      kubectl -n "$namespace" describe service "$service" | grep -A 5 "LoadBalancer Ingress"
      return 1
    fi
  else
    echo "   ‚ö†Ô∏è  Servicio $service no encontrado en namespace $namespace"
    return 1
  fi
}

# Verificar Rancher LoadBalancer (si est√° instalado)
RANCHER_LB_IP=""
if kubectl get namespace cattle-system &>/dev/null; then
  if check_loadbalancer "cattle-system" "rancher-loadbalancer" "Rancher LoadBalancer"; then
    RANCHER_LB_IP=$(kubectl -n cattle-system get service rancher-loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
  fi
else
  echo "‚ö†Ô∏è  Rancher no est√° instalado"
fi

# 3. VERIFICACI√ìN Y CONFIGURACI√ìN DNS
# ===================================
echo ""
echo "üåç VERIFICACI√ìN Y CONFIGURACI√ìN DNS"
echo "==================================="

if [ -n "${RANCHER_DOMAIN:-}" ]; then
  echo "üîç Verificando configuraci√≥n DNS para: $RANCHER_DOMAIN"
  
  # Verificar resoluci√≥n DNS
  echo -n "üì° Resoluci√≥n DNS actual: "
  if RESOLVED_IP=$(getent hosts "$RANCHER_DOMAIN" 2>/dev/null | awk '{print $1}'); then
    echo "$RANCHER_DOMAIN -> $RESOLVED_IP"
    
    # Comparar con IP del LoadBalancer
    if [ -n "$RANCHER_LB_IP" ]; then
      if [ "$RESOLVED_IP" = "$RANCHER_LB_IP" ]; then
        echo "   ‚úÖ DNS resuelve correctamente a la IP del LoadBalancer"
        DNS_CONFIGURED=true
      else
        echo "   ‚ö†Ô∏è  DNS resuelve a $RESOLVED_IP pero LoadBalancer est√° en $RANCHER_LB_IP"
        DNS_CONFIGURED=false
      fi
    else
      echo "   ‚ö†Ô∏è  No hay IP de LoadBalancer para comparar"
      DNS_CONFIGURED=false
    fi
  else
    echo "‚ùå No resuelve"
    DNS_CONFIGURED=false
  fi
  
  # Proporcionar instrucciones de configuraci√≥n DNS
  echo ""
  echo "üìù CONFIGURACI√ìN DNS REQUERIDA"
  echo "=============================="
  
  if [ "$DNS_CONFIGURED" = false ] && [ -n "$RANCHER_LB_IP" ]; then
    echo "üîß Para configurar DNS correctamente, necesitas:"
    echo ""
    echo "   OPCI√ìN 1 - DNS Server (Recomendado para producci√≥n):"
    echo "   ====================================================="
    echo "   Agrega este registro A en tu servidor DNS:"
    echo "   $RANCHER_DOMAIN.    IN    A    $RANCHER_LB_IP"
    echo ""
    echo "   OPCI√ìN 2 - /etc/hosts (Solo para pruebas):"
    echo "   =========================================="
    echo "   Agrega esta l√≠nea a /etc/hosts en m√°quinas cliente:"
    echo "   $RANCHER_LB_IP $RANCHER_DOMAIN"
    echo ""
    echo "   OPCI√ìN 3 - DNS Externo (Si usas proveedor DNS):"
    echo "   ============================================="
    echo "   Configura un registro A en tu proveedor DNS:"
    echo "   Host: $(echo "$RANCHER_DOMAIN" | cut -d'.' -f1)"
    echo "   Tipo: A"
    echo "   Valor: $RANCHER_LB_IP"
    echo "   TTL: 300"
    echo ""
  fi
else
  echo "‚ö†Ô∏è  RANCHER_DOMAIN no est√° configurado en .env"
fi

# 4. VERIFICACI√ìN DE CONECTIVIDAD WEB
# ===================================
echo ""
echo "üåê VERIFICACI√ìN DE CONECTIVIDAD WEB"
echo "==================================="

if [ -n "${RANCHER_DOMAIN:-}" ] && [ -n "$RANCHER_LB_IP" ]; then
  # Verificar acceso HTTP
  echo -n "üîó Verificando HTTP ($RANCHER_DOMAIN): "
  if curl -L --max-time 10 -s -I "http://$RANCHER_DOMAIN" | grep -q "30[12]"; then
    echo "‚úÖ Redirecci√≥n a HTTPS (correcto)"
  elif curl -L --max-time 10 -s -I "http://$RANCHER_DOMAIN" | grep -q "200"; then
    echo "‚úÖ Respuesta HTTP exitosa"
  else
    echo "‚ùå Sin respuesta HTTP"
  fi
  
  # Verificar acceso HTTPS
  echo -n "üîê Verificando HTTPS ($RANCHER_DOMAIN): "
  if curl -k --max-time 15 -s -I "https://$RANCHER_DOMAIN" | grep -q "200 OK"; then
    echo "‚úÖ Respuesta HTTPS exitosa"
    HTTPS_WORKING=true
    
    # Verificar certificado SSL
    echo -n "üîí Verificando certificado SSL: "
    if curl --max-time 10 -s -I "https://$RANCHER_DOMAIN" &>/dev/null; then
      echo "‚úÖ Certificado SSL v√°lido"
    else
      echo "‚ö†Ô∏è  Certificado SSL inv√°lido/auto-firmado (usar -k para bypass)"
    fi
  else
    echo "‚ùå Sin respuesta HTTPS"
    HTTPS_WORKING=false
    
    # Diagn√≥stico adicional
    echo "üîç Diagn√≥stico de conectividad HTTPS:"
    echo -n "   ‚Ä¢ Conectividad TCP puerto 443: "
    if timeout 5 bash -c "</dev/tcp/$RANCHER_LB_IP/443" 2>/dev/null; then
      echo "‚úÖ Puerto 443 accesible"
    else
      echo "‚ùå Puerto 443 no accesible"
    fi
  fi
  
  # Verificar acceso directo por IP
  echo ""
  echo "üîç Verificaci√≥n de acceso directo por IP:"
  echo -n "   ‚Ä¢ HTTP directo ($RANCHER_LB_IP:80): "
  if curl --max-time 5 -s -I "http://$RANCHER_LB_IP" | grep -q "30[12]"; then
    echo "‚úÖ Redirecci√≥n a HTTPS"
  elif curl --max-time 5 -s -I "http://$RANCHER_LB_IP" | grep -q "200"; then
    echo "‚úÖ Respuesta exitosa"
  else
    echo "‚ùå Sin respuesta"
  fi
  
  echo -n "   ‚Ä¢ HTTPS directo ($RANCHER_LB_IP:443): "
  if curl -k --max-time 5 -s -I "https://$RANCHER_LB_IP" | grep -q "200"; then
    echo "‚úÖ Respuesta exitosa"
  else
    echo "‚ùå Sin respuesta"
  fi
else
  echo "‚ö†Ô∏è  No se puede verificar conectividad web (faltan RANCHER_DOMAIN o RANCHER_LB_IP)"
fi

# 5. OBTENER CREDENCIALES DE RANCHER
# ==================================
echo ""
echo "üîê CREDENCIALES DE ACCESO"
echo "========================"

if kubectl get namespace cattle-system &>/dev/null; then
  echo "üîç Obteniendo credenciales de Rancher..."
  
  # Intentar obtener contrase√±a del secret
  if kubectl -n cattle-system get secret bootstrap-secret &>/dev/null; then
    RANCHER_PASSWORD=$(kubectl -n cattle-system get secret bootstrap-secret -o jsonpath="{.data.bootstrapPassword}" | base64 -d 2>/dev/null || echo "")
    
    if [ -n "$RANCHER_PASSWORD" ]; then
      echo "‚úÖ Credenciales obtenidas del cl√∫ster"
    else
      echo "‚ö†Ô∏è  Error decodificando contrase√±a del secret"
      RANCHER_PASSWORD="${BOOTSTRAP_PASSWORD:-N/A}"
    fi
  else
    echo "‚ö†Ô∏è  Secret bootstrap-secret no encontrado"
    RANCHER_PASSWORD="${BOOTSTRAP_PASSWORD:-N/A}"
  fi
  
  # Mostrar informaci√≥n de acceso
  echo ""
  echo "üéØ INFORMACI√ìN DE ACCESO A RANCHER"
  echo "=================================="
  echo "   üåê URL: https://$RANCHER_DOMAIN"
  echo "   üë§ Usuario: admin"
  echo "   üîë Contrase√±a: $RANCHER_PASSWORD"
  echo ""
  
  if [ "$HTTPS_WORKING" = true ]; then
    echo "‚úÖ Rancher est√° accesible y listo para usar"
  else
    echo "‚ö†Ô∏è  Verifica la configuraci√≥n DNS y conectividad de red"
  fi
else
  echo "‚ö†Ô∏è  Rancher no est√° instalado en este cl√∫ster"
fi

# 6. VERIFICACI√ìN DE CERTIFICADOS SSL
# ===================================
echo ""
echo "üîí VERIFICACI√ìN DE CERTIFICADOS SSL"
echo "==================================="

if kubectl get namespace cert-manager &>/dev/null; then
  echo "üìä Estado de cert-manager:"
  kubectl -n cert-manager get pods
  
  echo ""
  echo "üîê Certificados en el cl√∫ster:"
  kubectl get certificates -A
  
  echo ""
  echo "üîç ClusterIssuers disponibles:"
  kubectl get clusterissuers 2>/dev/null || echo "   ‚ö†Ô∏è  No hay ClusterIssuers configurados"
  
  # Verificar certificados espec√≠ficos de Rancher
  if kubectl get namespace cattle-system &>/dev/null; then
    echo ""
    echo "üöÄ Certificados de Rancher:"
    kubectl -n cattle-system get certificates 2>/dev/null || echo "   ‚ö†Ô∏è  No hay certificados espec√≠ficos de Rancher"
    
    # Verificar secrets TLS
    echo ""
    echo "üóùÔ∏è  Secrets TLS en cattle-system:"
    kubectl -n cattle-system get secrets -o custom-columns="NAME:.metadata.name,TYPE:.type" | grep tls || echo "   ‚ö†Ô∏è  No hay secrets TLS"
  fi
else
  echo "‚ö†Ô∏è  cert-manager no est√° instalado"
fi

# 7. INFORMACI√ìN DE RED Y CONECTIVIDAD
# ====================================
echo ""
echo "üåê INFORMACI√ìN DE RED Y CONECTIVIDAD"
echo "===================================="

echo "üìä Resumen de configuraci√≥n de red:"
echo "   ‚Ä¢ LoadBalancer IP: ${RANCHER_LB_IP:-N/A}"
echo "   ‚Ä¢ Dominio configurado: ${RANCHER_DOMAIN:-N/A}"
echo "   ‚Ä¢ Rango MetalLB: ${METALLB_IP_RANGE:-N/A}"
echo "   ‚Ä¢ IP del proxy/LB externo: ${LB_IP:-N/A}"

echo ""
echo "üîç Pruebas de conectividad desde el cl√∫ster:"

# Verificar resoluci√≥n DNS desde el cl√∫ster
if [ -n "${RANCHER_DOMAIN:-}" ]; then
  echo -n "   ‚Ä¢ Resoluci√≥n DNS interna: "
  if kubectl run dns-test --image=busybox --rm -it --restart=Never -- nslookup "$RANCHER_DOMAIN" &>/dev/null; then
    echo "‚úÖ Resuelve desde pods"
  else
    echo "‚ùå No resuelve desde pods"
  fi
fi

# Verificar conectividad a servicios externos
echo -n "   ‚Ä¢ Conectividad externa (google.com): "
if kubectl run connectivity-test --image=busybox --rm -it --restart=Never -- wget -q --spider google.com &>/dev/null; then
  echo "‚úÖ Conectividad externa OK"
else
  echo "‚ùå Sin conectividad externa"
fi

# 8. CONFIGURACI√ìN DE PROXY/NGINX (SI APLICA)
# ===========================================
echo ""
echo "üîÑ CONFIGURACI√ìN DE PROXY/NGINX EXTERNO"
echo "========================================"

if [ -n "${LB_IP:-}" ]; then
  echo "üìù Si usas NGINX Plus o HAProxy como LoadBalancer externo ($LB_IP):"
  echo ""
  echo "   Verifica que tenga configurados estos upstreams:"
  echo ""
  echo "   üîπ Para API de Kubernetes:"
  
  # Generar configuraci√≥n para masters
  get_nodes_by_type "master" | while read -r hostname; do
    if [ -n "$hostname" ]; then
      echo "      server $hostname:6443;"
      echo "      server $hostname:9345;"
    fi
  done
  
  echo ""
  echo "   üîπ Para Rancher UI/API:"
  get_nodes_by_type "worker" | while read -r hostname; do
    if [ -n "$hostname" ]; then
      echo "      server $hostname:80;"
      echo "      server $hostname:443;"
    fi
  done
  
  echo ""
  echo "   üìÑ Consulta docs/nginx-plus.md para configuraci√≥n completa"
else
  echo "‚ö†Ô∏è  LB_IP no configurado en .env"
fi

# 9. BACKUP Y MANTENIMIENTO
# =========================
echo ""
echo "üíæ INFORMACI√ìN DE BACKUP Y MANTENIMIENTO"
echo "========================================"

echo "üìÅ Ubicaciones importantes de backup:"
echo "   ‚Ä¢ Snapshots etcd: /var/lib/rancher/rke2/server/db/snapshots/"
echo "   ‚Ä¢ Configuraci√≥n RKE2: /etc/rancher/rke2/"
echo "   ‚Ä¢ Logs del sistema: journalctl -u rke2-server"

# Verificar snapshots recientes
PRIMARY_MASTER=$(get_primary_master)
echo ""
echo "üì∏ Snapshots recientes de etcd en $PRIMARY_MASTER:"
RECENT_SNAPSHOTS=$(ssh -p "$SSH_PORT" "$SSH_USER@$PRIMARY_MASTER" "ls -la /var/lib/rancher/rke2/server/db/snapshots/ 2>/dev/null | tail -5" || echo "Error accediendo a snapshots")
echo "$RECENT_SNAPSHOTS"

echo ""
echo "‚è∞ Comandos √∫tiles de mantenimiento:"
echo "   ‚Ä¢ Ver nodos: kubectl get nodes -o wide"
echo "   ‚Ä¢ Estado de pods: kubectl get pods -A"
echo "   ‚Ä¢ Logs de RKE2: journalctl -u rke2-server -f"
echo "   ‚Ä¢ Crear snapshot: rke2 etcd-snapshot save --name backup-\$(date +%s)"
echo "   ‚Ä¢ Ver eventos: kubectl get events --sort-by=.metadata.creationTimestamp"

# 10. RESUMEN FINAL Y PR√ìXIMOS PASOS
# ==================================
echo ""
echo "üéâ INSTALACI√ìN COMPLETADA - RESUMEN FINAL"
echo "=========================================="

# Contar componentes instalados
COMPONENTS_INSTALLED=0
COMPONENTS_TOTAL=5

echo "üìä Componentes del cl√∫ster:"

# RKE2
echo "   ‚úÖ RKE2 Kubernetes: $(kubectl version --short | grep Server | awk '{print $3}')"
((COMPONENTS_INSTALLED++))

# Ceph
if kubectl get namespace rook-ceph &>/dev/null; then
  echo "   ‚úÖ Rook-Ceph Storage"
  ((COMPONENTS_INSTALLED++))
else
  echo "   ‚ö†Ô∏è  Rook-Ceph: No instalado"
fi

# MetalLB
if kubectl get namespace metallb-system &>/dev/null; then
  echo "   ‚úÖ MetalLB LoadBalancer"
  ((COMPONENTS_INSTALLED++))
else
  echo "   ‚ö†Ô∏è  MetalLB: No instalado"
fi

# Rancher
if kubectl get namespace cattle-system &>/dev/null; then
  echo "   ‚úÖ Rancher Management"
  ((COMPONENTS_INSTALLED++))
else
  echo "   ‚ö†Ô∏è  Rancher: No instalado"
fi

# cert-manager
if kubectl get namespace cert-manager &>/dev/null; then
  echo "   ‚úÖ cert-manager SSL"
  ((COMPONENTS_INSTALLED++))
else
  echo "   ‚ö†Ô∏è  cert-manager: No instalado"
fi

echo ""
echo "üìà Instalaci√≥n: $COMPONENTS_INSTALLED/$COMPONENTS_TOTAL componentes"

# Mostrar informaci√≥n clave
echo ""
echo "üîë INFORMACI√ìN CLAVE:"
echo "===================="

if [ -n "${RANCHER_DOMAIN:-}" ] && [ -n "$RANCHER_PASSWORD" ]; then
  echo "üåê Acceso a Rancher:"
  echo "   URL: https://$RANCHER_DOMAIN"
  echo "   Usuario: admin"
  echo "   Contrase√±a: $RANCHER_PASSWORD"
  echo ""
fi

echo "‚öôÔ∏è  Acceso al cl√∫ster:"
echo "   Configuraci√≥n: /etc/rancher/rke2/rke2.yaml"
echo "   Variables: export KUBECONFIG=/etc/rancher/rke2/rke2.yaml"
echo ""

echo "üìä Estado del cl√∫ster:"
TOTAL_NODES=$(kubectl get nodes --no-headers | wc -l)
READY_NODES=$(kubectl get nodes --no-headers | grep -c " Ready ")
echo "   Nodos: $READY_NODES/$TOTAL_NODES listos"

if [ -n "$RANCHER_LB_IP" ]; then
  echo "   LoadBalancer: $RANCHER_LB_IP"
fi

echo ""
echo "üìö PR√ìXIMOS PASOS RECOMENDADOS:"
echo "=============================="
echo "   1. üîê Accede a Rancher y configura tu primer proyecto"
echo "   2. üë• Configura usuarios y roles de acceso"
echo "   3. üöÄ Despliega tu primera aplicaci√≥n"
echo "   4. üìä Configura monitoreo (Prometheus/Grafana)"
echo "   5. üîÑ Programa backups autom√°ticos"
echo "   6. üõ°Ô∏è  Implementa pol√≠ticas de seguridad"
echo "   7. üìà Configura auto-scaling si es necesario"

echo ""
echo "üìñ DOCUMENTACI√ìN:"
echo "================="
echo "   ‚Ä¢ README.md: Documentaci√≥n general"
echo "   ‚Ä¢ docs/index.md: Documentaci√≥n t√©cnica completa"
echo "   ‚Ä¢ docs/nginx-plus.md: Configuraci√≥n de proxy externo"
echo "   ‚Ä¢ Logs de instalaci√≥n: logs/"

echo ""
echo "üéä ¬°FELICITACIONES!"
echo "==================="
echo "Tu cl√∫ster RKE2 con Rancher en Alta Disponibilidad"
echo "ha sido instalado y configurado exitosamente."
echo ""
echo "El cl√∫ster est√° listo para uso en producci√≥n."

# Crear archivo de resumen
echo ""
echo "üìÑ Creando archivo de resumen..."

cat > cluster-summary.md <<EOF
# üìä Resumen del Cl√∫ster RKE2 + Rancher HA

## üóìÔ∏è Informaci√≥n de Instalaci√≥n
- **Fecha**: $(date)
- **Componentes instalados**: $COMPONENTS_INSTALLED/$COMPONENTS_TOTAL
- **Estado**: $([ "$COMPONENTS_INSTALLED" -eq "$COMPONENTS_TOTAL" ] && echo "‚úÖ Completo" || echo "‚ö†Ô∏è Parcial")

## üåê Acceso
- **Rancher URL**: https://${RANCHER_DOMAIN:-N/A}
- **Usuario**: admin
- **Contrase√±a**: ${RANCHER_PASSWORD:-N/A}
- **LoadBalancer IP**: ${RANCHER_LB_IP:-N/A}

## üñ•Ô∏è Cl√∫ster
- **Nodos totales**: $TOTAL_NODES
- **Nodos listos**: $READY_NODES
- **Configuraci√≥n kubectl**: /etc/rancher/rke2/rke2.yaml

## üì¶ Componentes
- **RKE2**: ‚úÖ Instalado
- **Rook-Ceph**: $(kubectl get namespace rook-ceph &>/dev/null && echo "‚úÖ Instalado" || echo "‚ö†Ô∏è No instalado")
- **MetalLB**: $(kubectl get namespace metallb-system &>/dev/null && echo "‚úÖ Instalado" || echo "‚ö†Ô∏è No instalado")
- **Rancher**: $(kubectl get namespace cattle-system &>/dev/null && echo "‚úÖ Instalado" || echo "‚ö†Ô∏è No instalado")
- **cert-manager**: $(kubectl get namespace cert-manager &>/dev/null && echo "‚úÖ Instalado" || echo "‚ö†Ô∏è No instalado")

## üîß Comandos √ötiles
\`\`\`bash
# Ver estado del cl√∫ster
kubectl get nodes -o wide

# Ver todos los pods
kubectl get pods -A

# Acceder a logs de RKE2
journalctl -u rke2-server -f

# Crear backup de etcd
rke2 etcd-snapshot save --name backup-\$(date +%s)
\`\`\`

## üìÅ Archivos Importantes
- Configuraci√≥n: /etc/rancher/rke2/config.yaml
- Snapshots: /var/lib/rancher/rke2/server/db/snapshots/
- Logs de instalaci√≥n: logs/

---
*Generado autom√°ticamente por el instalador RKE2 + Rancher HA*
EOF

echo "‚úÖ Resumen guardado en: cluster-summary.md"

echo ""
echo "üéØ INSTALACI√ìN FINALIZADA EXITOSAMENTE"
