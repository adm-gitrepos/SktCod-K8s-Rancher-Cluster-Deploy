#!/bin/bash
set -euo pipefail
trap 'echo "‚ùå Error en l√≠nea $LINENO durante instalaci√≥n de Rancher. Revisa el log." && exit 1' ERR

# Cargar variables y funciones
[ -f .env ] && source .env || { echo "‚ùå Falta archivo .env"; exit 1; }
[ -f scripts/node-helpers.sh ] && source scripts/node-helpers.sh || { echo "‚ùå Falta archivo scripts/node-helpers.sh"; exit 1; }

LOG="logs/05-install-rancher-$(date +%F-%H%M).log"
mkdir -p logs && exec > >(tee -a "$LOG") 2>&1

echo "üöÄ Iniciando instalaci√≥n de Rancher..."

# 1. VALIDACIONES INICIALES
# =========================
validate_nodes_config

export PATH=$PATH:/var/lib/rancher/rke2/bin
export KUBECONFIG=/etc/rancher/rke2/rke2.yaml

# Verificar comandos requeridos
for cmd in kubectl helm; do
  if ! command -v $cmd &>/dev/null; then
    if [ "$cmd" = "helm" ]; then
      echo "‚¨áÔ∏è  Instalando Helm..."
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      chmod 700 get_helm.sh
      ./get_helm.sh
      rm -f get_helm.sh
      echo "‚úÖ Helm instalado correctamente"
    else
      echo "‚ùå Falta comando: $cmd"
      echo "üí° Aseg√∫rate de que RKE2 est√© instalado correctamente"
      exit 1
    fi
  fi
done

# Verificar que el cl√∫ster est√© funcionando
if ! kubectl get nodes &>/dev/null; then
  echo "‚ùå El cl√∫ster Kubernetes no est√° accesible"
  echo "üí° Ejecuta primero: scripts/02-install-cluster.sh"
  exit 1
fi

# 2. VALIDAR CONFIGURACI√ìN DE RANCHER
# ===================================
echo "üîç Validando configuraci√≥n de Rancher..."

if [ -z "${RANCHER_DOMAIN:-}" ]; then
  echo "‚ùå RANCHER_DOMAIN no est√° definido en .env"
  echo "üí° Ejemplo: RANCHER_DOMAIN=rancher.midominio.com"
  exit 1
fi

if [ -z "${BOOTSTRAP_PASSWORD:-}" ]; then
  echo "‚ùå BOOTSTRAP_PASSWORD no est√° definido en .env"
  echo "üí° Ejemplo: BOOTSTRAP_PASSWORD=MiPasswordSegura123"
  exit 1
fi

echo "üìä Configuraci√≥n de Rancher:"
echo "   ‚Ä¢ Dominio: $RANCHER_DOMAIN"
echo "   ‚Ä¢ Versi√≥n: ${RANCHER_VERSION:-latest}"
echo "   ‚Ä¢ Password bootstrap: ${BOOTSTRAP_PASSWORD:0:5}..."

# Validar que el dominio resuelva correctamente
echo -n "üåê Verificando resoluci√≥n DNS de $RANCHER_DOMAIN: "
if getent hosts "$RANCHER_DOMAIN" >/dev/null; then
  RESOLVED_IP=$(getent hosts "$RANCHER_DOMAIN" | awk '{print $1}')
  echo "‚úÖ Resuelve a: $RESOLVED_IP"
else
  echo "‚ùå No resuelve"
  echo "üí° Configura DNS o agrega a /etc/hosts:"
  echo "   echo '$LB_IP $RANCHER_DOMAIN' >> /etc/hosts"
  exit 1
fi

# 3. VERIFICAR PREREQUISITOS DEL CL√öSTER
# ======================================
echo "üîç Verificando prerequisitos del cl√∫ster..."

# Verificar nodos worker (donde se desplegar√° Rancher)
WORKER_NODES=$(get_nodes_by_type "worker")
if [ -z "$WORKER_NODES" ]; then
  echo "‚ùå No hay nodos worker configurados"
  echo "üí° Rancher necesita nodos worker para desplegarse"
  exit 1
fi

WORKER_COUNT=$(echo "$WORKER_NODES" | wc -l)
echo "üìä Nodos worker disponibles: $WORKER_COUNT"

# Verificar que los nodos worker est√©n listos
echo "$WORKER_NODES" | while read -r hostname; do
  if [ -n "$hostname" ]; then
    echo -n "‚û°Ô∏è  Verificando $hostname: "
    if kubectl get node "$hostname" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
      echo "‚úÖ Listo"
    else
      echo "‚ùå No est√° listo"
      exit 1
    fi
  fi
done

# Verificar MetalLB
echo -n "üåê Verificando MetalLB: "
if kubectl -n metallb-system get pods | grep -q "Running"; then
  echo "‚úÖ MetalLB est√° ejecut√°ndose"
else
  echo "‚ùå MetalLB no est√° funcionando"
  echo "üí° Ejecuta primero: scripts/04-install-metallb.sh"
  exit 1
fi

# 4. VERIFICAR INSTALACI√ìN PREVIA
# ===============================
echo "üîç Verificando instalaci√≥n previa de Rancher..."

if kubectl get namespace cattle-system &>/dev/null; then
  echo "‚ö†Ô∏è  Rancher ya est√° instalado"
  echo "üìã Estado actual:"
  kubectl -n cattle-system get pods
  echo ""
  echo "üîÑ ¬øDeseas reinstalar Rancher? ESTO ELIMINAR√Å TODOS LOS DATOS. (y/N)"
  read -r -n 1 response
  echo
  if [[ "$response" =~ ^[Yy]$ ]]; then
    echo "üóëÔ∏è  Desinstalando Rancher previo..."
    helm uninstall rancher -n cattle-system || true
    kubectl delete namespace cattle-system --timeout=180s || true
    sleep 30
  else
    echo "‚úÖ Manteniendo instalaci√≥n existente de Rancher"
    echo "üëâ Contin√∫a con: scripts/06-verify-installation.sh"
    exit 0
  fi
fi

# 5. CREAR NAMESPACE Y CONFIGURAR HELM
# ====================================
echo "üìÅ Preparando namespaces y repositorios Helm..."

# Crear namespaces
kubectl create namespace cattle-system || true
kubectl create namespace cert-manager || true

# Configurar repositorios Helm
echo "üì• Configurando repositorios Helm..."

# Repositorio de Rancher
if ! helm repo list | grep -q "rancher-latest"; then
  helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
  echo "‚úÖ Repositorio rancher-latest agregado"
else
  echo "‚úÖ Repositorio rancher-latest ya existe"
fi

# Repositorio de Jetstack (cert-manager)
if ! helm repo list | grep -q "jetstack"; then
  helm repo add jetstack https://charts.jetstack.io
  echo "‚úÖ Repositorio jetstack agregado"
else
  echo "‚úÖ Repositorio jetstack ya existe"
fi

# Actualizar repositorios
echo "üîÑ Actualizando repositorios Helm..."
helm repo update

# 6. INSTALAR CERT-MANAGER
# ========================
echo "üîê Instalando cert-manager..."

# Verificar si cert-manager ya est√° instalado
if helm list -n cert-manager | grep -q "cert-manager"; then
  echo "‚úÖ cert-manager ya est√° instalado"
else
  CERT_MANAGER_VERSION="v1.14.4"
  
  echo "‚¨áÔ∏è  Instalando cert-manager $CERT_MANAGER_VERSION..."
  helm upgrade --install cert-manager jetstack/cert-manager \
    --namespace cert-manager \
    --create-namespace \
    --version "$CERT_MANAGER_VERSION" \
    --set installCRDs=true \
    --set global.leaderElection.namespace=cert-manager \
    --wait --timeout=10m
fi

# Esperar a que cert-manager est√© listo
echo "‚è≥ Esperando que cert-manager est√© listo..."
kubectl -n cert-manager rollout status deployment/cert-manager --timeout=300s
kubectl -n cert-manager rollout status deployment/cert-manager-cainjector --timeout=300s
kubectl -n cert-manager rollout status deployment/cert-manager-webhook --timeout=300s

echo "‚úÖ cert-manager est√° listo"

# 7. CONFIGURAR VALORES PARA RANCHER
# ==================================
echo "üìù Configurando valores para Rancher..."

# Crear archivo de valores personalizado
cat > rancher-values.yaml <<EOF
# Configuraci√≥n de Rancher para HA
hostname: $RANCHER_DOMAIN
replicas: 3

# Configuraci√≥n de bootstrap
bootstrapPassword: "$BOOTSTRAP_PASSWORD"

# Configuraci√≥n de TLS
ingress:
  tls:
    source: letsEncrypt

letsEncrypt:
  email: admin@$RANCHER_DOMAIN
  environment: production
  ingress:
    class: nginx

# Configuraci√≥n de recursos
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Configuraci√≥n de nodos
nodeSelector:
  rke2-rancher: "true"

tolerations:
- key: "node-role.kubernetes.io/worker"
  operator: "Equal"
  value: "true"
  effect: "NoSchedule"

# Configuraci√≥n de anti-afinidad
antiAffinity: preferred

# Configuraci√≥n adicional
addLocal: "auto"
useBundledSystemChart: true

# Configuraci√≥n de audit logs
auditLog:
  level: 1
  destination: hostPath
  hostPath: /var/log/rancher/audit.log

# Configuraci√≥n de proxy
systemDefaultRegistry: ""
useBundledSystemChart: true
EOF

# 8. INSTALAR RANCHER
# ===================
echo "üöÄ Instalando Rancher..."

RANCHER_VERSION_PARAM=""
if [ -n "${RANCHER_VERSION:-}" ]; then
  RANCHER_VERSION_PARAM="--version $RANCHER_VERSION"
  echo "üì¶ Instalando Rancher versi√≥n: $RANCHER_VERSION"
else
  echo "üì¶ Instalando Rancher versi√≥n: latest"
fi

helm upgrade --install rancher rancher-latest/rancher \
  --namespace cattle-system \
  --values rancher-values.yaml \
  $RANCHER_VERSION_PARAM \
  --wait --timeout=15m

# 9. CREAR SERVICIO LOADBALANCER
# ==============================
echo "üåê Creando servicio LoadBalancer para Rancher..."

cat > rancher-loadbalancer.yaml <<EOF
apiVersion: v1
kind: Service
metadata:
  name: rancher-loadbalancer
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher
spec:
  type: LoadBalancer
  selector:
    app: rancher
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  loadBalancerIP: $LB_IP
EOF

kubectl apply -f rancher-loadbalancer.yaml

# 10. MONITOREAR DESPLIEGUE
# =========================
echo "‚è≥ Monitoreando despliegue de Rancher..."

# Esperar a que los pods est√©n listos
for i in {1..30}; do
  READY_PODS=$(kubectl -n cattle-system get pods -l app=rancher --no-headers 2>/dev/null | grep -c "Running" || echo "0")
  TOTAL_PODS=$(kubectl -n cattle-system get pods -l app=rancher --no-headers 2>/dev/null | wc -l || echo "0")
  
  echo "üìä Estado de pods Rancher: $READY_PODS/$TOTAL_PODS ejecut√°ndose"
  
  if [ "$READY_PODS" -eq 3 ] && [ "$TOTAL_PODS" -eq 3 ]; then
    echo "‚úÖ Todos los pods de Rancher est√°n ejecut√°ndose"
    break
  fi
  
  if [ $i -eq 30 ]; then
    echo "‚ùå Timeout esperando pods de Rancher (15 minutos)"
    echo "üìã Estado actual:"
    kubectl -n cattle-system get pods -l app=rancher
    exit 1
  fi
  
  echo "‚è≥ Esperando pods de Rancher... (verificaci√≥n $i/30)"
  sleep 30
done

# Esperar a que el LoadBalancer tenga IP externa
echo "‚è≥ Esperando asignaci√≥n de IP externa..."
for i in {1..20}; do
  EXTERNAL_IP=$(kubectl -n cattle-system get service rancher-loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
  
  if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
    echo "‚úÖ IP externa asignada: $EXTERNAL_IP"
    break
  fi
  
  if [ $i -eq 20 ]; then
    echo "‚ö†Ô∏è  No se asign√≥ IP externa despu√©s de 10 minutos"
    echo "üìã Estado del servicio:"
    kubectl -n cattle-system describe service rancher-loadbalancer
  else
    echo "‚è≥ Esperando IP externa... (intento $i/20)"
    sleep 30
  fi
done

# 11. VERIFICAR ACCESO HTTPS
# ==========================
echo "üîê Verificando acceso HTTPS a Rancher..."

for i in {1..20}; do
  echo -n "üåê Probando https://$RANCHER_DOMAIN (intento $i/20): "
  
  if curl -k --max-time 10 -s -I "https://$RANCHER_DOMAIN" | grep -q "200 OK"; then
    echo "‚úÖ Rancher responde correctamente"
    break
  elif curl -k --max-time 10 -s -I "https://$RANCHER_DOMAIN" | grep -q "503"; then
    echo "‚è≥ Rancher iniciando (503)"
  else
    echo "‚ùå Sin respuesta"
  fi
  
  if [ $i -eq 20 ]; then
    echo "‚ö†Ô∏è  Rancher no responde despu√©s de 10 minutos"
    echo "üí° Verifica:"
    echo "   ‚Ä¢ DNS: $RANCHER_DOMAIN debe resolver a $LB_IP"
    echo "   ‚Ä¢ LoadBalancer: IP externa asignada"
    echo "   ‚Ä¢ Certificados: Let's Encrypt configurado"
  else
    sleep 30
  fi
done

# 12. OBTENER CREDENCIALES
# ========================
echo "üîê Obteniendo credenciales de Rancher..."

# Esperar a que el secret de bootstrap est√© disponible
for i in {1..10}; do
  if kubectl -n cattle-system get secret bootstrap-secret &>/dev/null; then
    PASSWORD=$(kubectl -n cattle-system get secret bootstrap-secret -o jsonpath="{.data.bootstrapPassword}" | base64 -d)
    echo "‚úÖ Credenciales obtenidas"
    break
  fi
  
  if [ $i -eq 10 ]; then
    echo "‚ö†Ô∏è  No se pudo obtener el secret de bootstrap"
    PASSWORD="$BOOTSTRAP_PASSWORD"
  else
    echo "‚è≥ Esperando secret de bootstrap... (intento $i/10)"
    sleep 10
  fi
done

# 13. CONFIGURAR INGRESS ADICIONAL (OPCIONAL)
# ===========================================
echo "üåê Configurando ingress adicional..."

cat > rancher-ingress.yaml <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rancher-ingress
  namespace: cattle-system
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  tls:
  - hosts:
    - $RANCHER_DOMAIN
    secretName: tls-rancher-ingress
  rules:
  - host: $RANCHER_DOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rancher
            port:
              number: 443
EOF

kubectl apply -f rancher-ingress.yaml

# 14. VERIFICACI√ìN FINAL
# ======================
echo ""
echo "üìä Estado final de Rancher:"
kubectl -n cattle-system get pods -l app=rancher

echo ""
echo "üåê Servicios de Rancher:"
kubectl -n cattle-system get services

echo ""
echo "üîê Certificados:"
kubectl -n cattle-system get certificates

echo ""
echo "üìã Ingress:"
kubectl -n cattle-system get ingress

echo ""
echo "üéâ Instalaci√≥n de Rancher completada exitosamente"
echo "üìä Resumen:"
echo "   ‚Ä¢ URL: https://$RANCHER_DOMAIN"
echo "   ‚Ä¢ Usuario: admin"
echo "   ‚Ä¢ Contrase√±a: $PASSWORD"
echo "   ‚Ä¢ Versi√≥n: ${RANCHER_VERSION:-latest}"
echo "   ‚Ä¢ Replicas: 3 (Alta Disponibilidad)"
echo "   ‚Ä¢ TLS: Let's Encrypt (Producci√≥n)"

if [ -n "${EXTERNAL_IP:-}" ]; then
  echo "   ‚Ä¢ LoadBalancer IP: $EXTERNAL_IP"
fi

echo ""
echo "üìÅ Archivos generados:"
echo "   ‚Ä¢ rancher-values.yaml (configuraci√≥n Helm)"
echo "   ‚Ä¢ rancher-loadbalancer.yaml (servicio LoadBalancer)"
echo "   ‚Ä¢ rancher-ingress.yaml (ingress adicional)"
echo ""
echo "üí° Pr√≥ximos pasos:"
echo "   1. Accede a https://$RANCHER_DOMAIN"
echo "   2. Inicia sesi√≥n con admin / $PASSWORD"
echo "   3. Configura tu primer proyecto/namespace"
echo ""
echo "üëâ Contin√∫a con: scripts/06-verify-installation.sh"
